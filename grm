#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Cwd qw(cwd getcwd);
use IPC::Open3 qw(open3);

sub run_sync_redir;

our $myPath = $0;
our $myName = basename($myPath);

our $SEPARATOR = '*';
our $mode; # Taken from the command line
use constant CONFIG_FILENAME => '.grm.conf';

use constant MODE_LIST => qw(
	clone
	git
	set-remote
	configure
	list-rrel
	list-rurl
	list-lrel
	run
);

use constant MODE_LIST_LS => join("\n",MODE_LIST);

# Store a clean copy of the original environment
our %clean_env = %ENV;
# Remove any GRM_ variables from the clean environment
foreach my $key (keys %clean_env) {
    delete $clean_env{$key} if $key =~ /^GRM_/;
}

our $config = {};

if (-t STDIN) # Not a recursive child process - set defaults
{
	$config->{OPT_DEBUG_PRIMITIVES} = 0;
	$config->{OPT_RECURSE   } =  1;
	$config->{RECURSE_PREFIX} = '';
}

# Overlay environment variables
foreach my $envKey (keys %ENV) {
	if ($envKey =~ /^GRM_(.+)$/) {
		my $configKey = $1;

		if ($configKey =~ /^OPT_/) {
			# Convert boolean options - anything non-empty besides '' is true
			$config->{$configKey} = ($ENV{$envKey} ne '') ? 1 : 0;
		} else {
			$config->{$configKey} = $ENV{$envKey};
		}
	}
}

if (-t STDIN) # Not a recursive child process - get configuration from the 'nearest' conffile
{
	# Special case: antirecurse to find the conffile and process it
	my $pathConf = &find_conffile();
	open(my $handle,'<:encoding(UTF-8)',$pathConf) or die "$myName: cannot open '$pathConf'\n";
	&listfile_process($handle,$pathConf);
	close($handle);
}
else # STDIN is likely a pipe; configure from STDIN instead of a conffile
{
	&listfile_process(*STDIN,undef);
}

$config = &config_clean($config); # Protect ourselves from conffile overreach

die "$myName: configuration is missing LIST_FN"
	unless defined($config->{LIST_FN});

# Process the one and only possible command-line arg
&mode_set(shift @ARGV);

our $treeFilter = cwd; # Save current directory so we can use it later

&chdir_listfile; # Change to the nearest ancestor dir containing a listfile
die "$myName: cannot open listfile '$config->{RECURSE_PREFIX}$config->{LIST_FN}'\n"
	unless open(my $handle,'<:encoding(UTF-8)',$config->{LIST_FN});
&listfile_process($handle,$config->{LIST_FN});
close($handle);

&recurse_listfiles($treeFilter) if $config->{OPT_RECURSE};

exit 0;

########################################################################################################################

sub listfile_process
{
	my ($handle,$listFile) = @_;

	my $quotedPath  =  $listFile ? "'$config->{RECURSE_PREFIX}$listFile'" : '<HANDLE>';

	warn "$myName: processing $quotedPath\n" if
		$config->{OPT_DEBUG_PRIMITIVES};

	while (<$handle>)
	{
		next unless defined (my $result = parse_line($_));
		my ($REMOTE_REL,$LOCAL_REL,$GM_REL) = @{$result};

		unless ($REMOTE_REL)
		{
			$config->{$LOCAL_REL} = $GM_REL;
			next;
		}

		$REMOTE_REL =~ /(?:.*(?<!\\)\/)?(.*?)(?:.git)?$/;
		my $repoName = $1;

		$LOCAL_REL = $repoName unless $LOCAL_REL;
		$GM_REL = $repoName unless $GM_REL;

		my $remotePath = &cat_path($config->{REMOTE_DIR},$REMOTE_REL);
		my $localPath  = &cat_path($config->{LOCAL_DIR },$LOCAL_REL );
		my $mediaPath  = &cat_path($config->{GM_DIR    },$GM_REL    );

		&repo_process($localPath,$remotePath,$mediaPath)
			if cat_path(cwd,$localPath) =~ /\Q$treeFilter\E(?:\/.+)?$/; # Skip items outside the tree we were run in
	}
}

sub cat_path
{
	my @pieces = grep {defined $_ and $_ ne ''} @_;

	my $result = undef;
	for my $piece (reverse @pieces)
	{
		$piece =~ s/^\.\///;

		$result  =  defined $result ? "$piece/$result" : $piece;

		return $result if $piece =~ /^\//;
	}

	return $result;
}

sub parse_line
{
	my ($line) = @_;

	chomp $line;

	$line =~ s/#.*$//;        # Remove comments (can be suffix)
	return undef if $line =~ /^\s*$/; # Skip lines of pure whitespace

	# Split into (max) 3 fields (ignoring escaped separators), pad to 3 fields with undef, and unescape them
	my @cols = &unescape_fields(split(qr/(?<!\\)\Q$SEPARATOR\E/,$line,3));
	$#cols = 2;
	return \@cols;
}

sub config_clean
{
	my ($hr) = @_;

	# Clear these to avoid pollution between parent and child processes
	delete $hr->{REMOTE_DIR};
	delete $hr->{LOCAL_DIR };
	delete $hr->{GM_DIR    };
	delete $hr->{MODE_CLONE     };
	delete $hr->{MODE_GIT       };
	delete $hr->{MODE_SET_REMOTE};
	delete $hr->{MODE_CONFIGURE };
	delete $hr->{MODE_LIST_RREL };
	delete $hr->{MODE_LIST_RURL };
	delete $hr->{MODE_LIST_LREL };

	return $hr;
}

sub config_clone
{
	return &config_clean({%$config}); # Copy and redact the config
}

# : => \: then ^(\s) => ^\? then (\s)$ => \?$
sub escape_fields
{
	return map {($_//'') =~ s/(?=[\:])|(?=^\s)|(?=\s$)/\\/gr} @_;
}

sub unescape_fields
{
	return map { ($_//'') =~ s/^\s+|\\(.)|\s+$/(defined $1 ? $1 : '')/gre } @_;
}

sub config_print
{
	my ($fh,$c) = @_;

	while (my($k,$v) = &escape_fields(each %$c))
	{
		printf $fh "$SEPARATOR $k $SEPARATOR %s\n",$v // '';
	}
}

sub find_conffile
{
	printf STDERR "  chdir_find_listfile: starting at '%s'\n",cwd
		if $config->{OPT_DEBUG_PRIMITIVES};

	my $orig = cwd;

	until (-e CONFIG_FILENAME)
	{
		my $prev = cwd;

		die "$myName: no '${\CONFIG_FILENAME}' file found in current directory or any ancestor\n"
			unless chdir('..') and cwd ne $prev;
	}

	my $result = cwd."/${\CONFIG_FILENAME}";
	chdir($orig);
	return $result;
}

sub chdir_listfile
{
	until (-e $config->{LIST_FN})
	{
		my $prev = cwd;
		
		die "$myName: no '$config->{LIST_FN}' file found in current directory or any ancestor\n"
			unless chdir('..') and cwd ne $prev;
	}
}

sub run_sync_redir(@)
{
	my $pid;

	die "$myName: failed to run {@_}\n"
		unless $pid = open3(undef,'>&STDERR','>&STDERR',@_)
		and $pid == waitpid $pid,0;

	return $?;
}

sub indir ($&)
{
	my $dir = shift @_;
	my $code = \&{shift @_};

	my $orig = cwd;
	chdir($dir);
	my $result = $code->();
	chdir($orig);
	return $result;
}

sub is_dir_repo_root
{
	my ($localPath) = @_;

	my $prefix = indir $localPath,sub {return qx! git rev-parse --show-prefix !};

	die "$myName: is_dir_repo_root failed\n"
		if $?;

	chomp $prefix;
	return $prefix eq '';
}

sub mode_set
{
	my ($cmd_mode) = @_;

	die "$myName: missing mode\n" if not defined($cmd_mode) or $cmd_mode eq '';
	die "$myName: no such mode '$cmd_mode'; must be one of:\n${\MODE_LIST_LS}\n" unless grep(/^$cmd_mode$/,MODE_LIST);

	$mode = $cmd_mode;

	if ($mode eq 'git')
	{
		$config->{MODE_CLONE     } = 0;
		$config->{MODE_GIT       } = 1;
		$config->{MODE_SET_REMOTE} = 1;
		$config->{MODE_CONFIGURE } = 1;
		return;
	}

	die "$myName: too many arguments\n" unless scalar @ARGV <= 0;

	if ($mode eq 'run')
	{
		$config->{MODE_CLONE     } = 1;
		$config->{MODE_SET_REMOTE} = 1;
	}
	else
	{
		$config->{MODE_CLONE     } = $mode eq       'clone';
		$config->{MODE_SET_REMOTE} = $mode eq  'set-remote';
		$config->{MODE_CONFIGURE } = $mode eq   'configure';
		$config->{MODE_LIST_RREL } = $mode eq   'list-rrel';
		$config->{MODE_LIST_RURL } = $mode eq   'list-rurl';
		$config->{MODE_LIST_LREL } = $mode eq   'list-lrel';
	}

	$config->{MODE_CONFIGURE} ||= $config->{MODE_CLONE}; # Cloning requires configuration as phase 2/3, before checkout
}

sub repo_process
{
	my ($localPath,$remotePath,$mediaPath) = @_;

	my $remoteURL  =  (length $config->{REMOTE_BASE_URL}) ? "$config->{REMOTE_BASE_URL}/$remotePath" : $remotePath;
	$mediaPath = cat_path($config->{GM_BASE_PATH},$mediaPath);

	# These return in order to maximise speed
	return print "$remotePath\n"            if $mode eq 'list-rrel';
	return print "$remoteURL\n"             if $mode eq 'list-rurl';
	return print "$config->{RECURSE_PREFIX}$localPath\n" if $mode eq 'list-lrel';

	warn "  repo_process: '$config->{RECURSE_PREFIX}$localPath'\n"
		if $config->{OPT_DEBUG_PRIMITIVES};

	unless (-e $localPath)
	{
		# We need to configure after clone but before checkout, thus the three steps
		&repo_clone_nocheckout($localPath,$remoteURL);
		&repo_config($localPath,$mediaPath);
		&repo_check_out($localPath);
		return;
	}

	unless (-d $localPath)
	{
		# Flag non-dirs that block repos
		warn "ERROR: '$config->{RECURSE_PREFIX}$localPath' is not a directory\n";
		return;
	}

	# Don't touch non-repo dirs with a bargepole
	unless (&is_dir_repo_root($localPath))
	{
		warn "ERROR: '$config->{RECURSE_PREFIX}$localPath' is not a Git repository\n";
		return;
	}

	# For existing repos, don't clone but do update remote & configure
	warn "'$config->{RECURSE_PREFIX}$localPath' exists\n";
	&repo_set_remote($localPath,$remoteURL);
	&repo_config($localPath,$mediaPath);
	&repo_cmd($localPath);
}

sub repo_clone_nocheckout
{
	return unless $config->{MODE_CLONE};

	my ($localPath,$remotePath) = @_;

	warn "  repo_clone_nocheckout: '$config->{RECURSE_PREFIX}$localPath'\n"
		if $config->{OPT_DEBUG_PRIMITIVES};

	die "$myName: repo_clone_nocheckout failed\n"
		if run_sync_redir qw! git clone --no-checkout !,$remotePath,$localPath;
}

sub repo_config
{
	return unless $config->{MODE_CONFIGURE} and $config->{CONFIG_CMD};

	my ($localPath,$mediaPath) = @_;

	$mediaPath = '' unless defined $mediaPath;

	warn "  repo_config: '$config->{RECURSE_PREFIX}$localPath' with '$mediaPath'\n"
		if $config->{OPT_DEBUG_PRIMITIVES};

	die "$myName: repo_config failed\n"
		if indir $localPath,sub {return run_sync_redir $config->{CONFIG_CMD},$mediaPath;};
}

sub repo_cmd
{
	return unless $config->{MODE_GIT};

	my ($localPath) = @_;

	indir $localPath,sub {return run_sync_redir 'git',@ARGV;};
}

sub repo_check_out
{
	return unless $config->{MODE_CLONE}; # Checkout is the last phase of cloning

	my ($localPath) = @_;

	warn "  repo_check_out: '$config->{RECURSE_PREFIX}$localPath'\n"
		if $config->{OPT_DEBUG_PRIMITIVES};

	die "$myName: repo_check_out failed\n"
		if indir $localPath,sub {return run_sync_redir qw! git reset --hard !;}
}

sub remote_fallback_inv
{
	no warnings;

	my ($remoteURL) = @_;

	my $pid = open3 undef,'>&STDERR',*DEVNULL,qw! git remote set-url origin !,$remoteURL;
	die "$myName: failed to spawn git\n"
		unless $pid;

	die "$myName: waitpid failed\n"
		if $pid != waitpid($pid,0);

	return $?
		unless 512 == $?; # Apparently this should be 3 but the git-remote docs are made of lies

	return run_sync_redir qw! git remote add -f origin     !,$remoteURL;
}

sub repo_set_remote
{
	return unless $config->{MODE_SET_REMOTE};

	my ($localPath,$remotePath) = @_;

	warn "  repo_set_remote: '$config->{RECURSE_PREFIX}$localPath'\n"
		if $config->{OPT_DEBUG_PRIMITIVES};

	die "$myName: repo_set_remote failed\n"
		if indir $localPath,sub {return remote_fallback_inv($remotePath);};
}

# Spawn a child process and pass config via environment variables
sub recurse
{
	return unless $config->{OPT_RECURSE};

	my ($kidPath) = @_;
	my $kidPathRel  =  $kidPath =~ s/^$treeFilter\///r;

	my $childConfig = &config_clone;
	$childConfig->{RECURSE_PREFIX} = "$config->{RECURSE_PREFIX}$kidPathRel/";

	# Set up environment variables for the child process
	my %childEnv = %clean_env;  # Start with the clean environment
	
	# Add all config items as environment variables with GRM_ prefix
	foreach my $key (keys %$childConfig) {
		if (defined $childConfig->{$key}) {
			if ($key =~ /^OPT_/) {
				# Boolean options: empty string for false, 'true' for true
				$childEnv{"GRM_$key"} = $childConfig->{$key} ? 'true' : '';
			}
			else {
				# All other values passed normally (including MODE_* which will be overridden by mode_set)
				$childEnv{"GRM_$key"} = $childConfig->{$key};
			}
		}
	}

	# Spawn the child process with the modified environment
	my $exitStatus;
	{
		local %ENV = %childEnv;  # Temporarily modify environment
		
		# Use system() instead of open3 since we don't need STDIN interaction
		indir $kidPath,sub {
			system($myPath, $mode, @ARGV);
			$exitStatus = $?;  # Preserve the full status including signal information
			return 0;
		};
	}

	# Check if child was terminated by a signal (low 8 bits) or had a non-zero exit (high 8 bits)
	die "$myName: recursive instance failed\n"
		if $exitStatus;
}

# Recurse a tree looking for listfiles and delegating them to child processes
sub recurse_listfiles
{
	my ($dir) = @_;
	$dir =~ s/\/$//; # Remove any trailing slash before concatenating

	die "$myName: recursion to '${\cat_path($config->{RECURSE_PREFIX},$dir)}' failed\n"
		unless opendir(my $handle,$dir);

	my @kids = readdir($handle);

	foreach my $kid (@kids)
	{
		my $kidPath = cat_path($dir,$kid);
		next unless -d $kidPath;

		next if $kid =~ /^\./;

		if (-e "$kidPath/$config->{LIST_FN}") # Subdirs containing listfiles need recursive invocation
		{
			&recurse($kidPath);
			next; # Recursion will have found any deeper listfiles, so bail on this dir
		}

		&recurse_listfiles($kidPath);
	}

	closedir($handle);
}