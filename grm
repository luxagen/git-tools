#!/usr/bin/perl
use strict;
use warnings;

my $args = $#ARGV + 1;

die "Please supply the base URL\n" unless $args > 0;
die "Fewer arguments!\n" unless $args <= 2;

$ARGV[1] = '' unless defined $ARGV[1];

my $config = {
	REMOTE_DIR => '',
	LOCAL_DIR => '.',
	GM_DIR => undef,
};

open (my $fh, '<', ".remotes") or exit 0;
while (<$fh>){
    chomp;

    s/#.*$//;        # Remove comments (can be suffix)
    next if /^\s*$/; # Skip lines of pure whitespace
    s/\s+$//;        # Remove trailing whitespace (can happen after stripping inline comments)

    my ($REMOTE_REL, $LOCAL_REL, $GM_REL) = split /:/, $_, 3;
    $REMOTE_REL = '' unless defined ($REMOTE_REL);
    $LOCAL_REL = '' unless defined ($LOCAL_REL);
    $GM_REL = '' unless defined ($GM_REL);

	if ($REMOTE_REL eq '') {
		$config->{$LOCAL_REL} = $GM_REL;
		next;
	}

    $LOCAL_REL = $REMOTE_REL unless ($LOCAL_REL ne '');
	$GM_REL = $REMOTE_REL unless ($GM_REL ne '');

	my $remotePath = "$config->{REMOTE_DIR}/$REMOTE_REL";
	my $localPath = "$config->{LOCAL_DIR}/$LOCAL_REL";
	my $mediaPath = join('/', grep {$_} $config->{GM_DIR}, $GM_REL);
	my $configCmd = $ARGV[1];

    my $cloneFailed = system qq!git clone --no-checkout "$ARGV[0]/$remotePath" "$localPath"!;

    my $repoRoot = `cd "$localPath" && git rev-parse --show-prefix`;
    chomp $repoRoot;

    if ($repoRoot ne '') {
		print STDERR "ERROR: '$localPath' exists but is not a git repository!\n";
		next;
    }

	system qq!(cd "$localPath" && gmc "$ARGV[0]" "$ARGV[1]")!;
	system qq!(cd "$localPath" && $configCmd "$mediaPath")! if $configCmd;

    if ($cloneFailed) {
		system qq!(cd "$localPath" && git remote set-url origin "$ARGV[0]/$remotePath")!;
	}
	else {
        system qq!(cd "$localPath" && git reset --hard)! unless $cloneFailed;
	}
}
